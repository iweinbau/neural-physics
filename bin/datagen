#!/usr/bin/env python
"""Data generation CLI tool simulating the position of a mass subject to gravity."""
import argparse

import numpy as np
import pandas as pd
import yaml
import io

GRAVITY = 9.81  # m/s^2
GRAVITY_DIRECTION = np.array([0, -1, 0])
MASS = 1  # kg

def time(step: int, fps: int):
    """Calculate the time in seconds for a given step."""
    return round(step / fps, 5)

def forward_euler_step(m: float, 
                       dt: float, 
                       v_prev:np.ndarray, 
                       x_prev:np.ndarray, 
                       external_force: np.ndarray):
    """Forward Euler step for a mass subject to external_force."""
    v = v_prev + (external_force / m) * dt
    x = x_prev + v_prev * dt
    return x, v

def main():
    """Main function for the data generation tool."""
    parser = argparse.ArgumentParser(
        description="Generate data for the position of a mass subject to gravity."
    )
    parser.add_argument(
        "-n",
        "--number",
        type=int,
        default=1000,
        help="Number of data points to generate.",
    )
    parser.add_argument(
        "-f",
        "--fps",
        type=int,
        default=60,
        help="Frames per second.",
    )
    parser.add_argument(
        "-y",
        "--y-init",
        type=float,
        default=1500,
        help="Initial height of the mass.",
    )
    parser.add_argument(
        "-g",
        "--gravity_acc",
        type=float,
        default=9.81,
        help="Gravitational acceleration"
    )
    parser.add_argument(
        "-gd",
        "--gravity-dir",
        nargs='+',
        default=np.array([0, -1, 0]),
        type=float,
        help="Gravity direction"
    )

    parser.add_argument(
        "-sl",
        "--sea-level",
        type=float,
        default=0,
        help="Sea level height"
    )
    parser.add_argument(
        "-o", "--data_output", type=str, default="data.npy", help="Output data file name."
    )
    parser.add_argument(
        "-ox", "--external_output", type=str, default="external.npy", help="Output external file name."
    )
    args = parser.parse_args()

    GRAVITY_ACC = args.gravity_acc
    GRAVITY_DIRECTION = np.array(args.gravity_dir)
    GRAVITIONAL_FORCE = GRAVITY_ACC * MASS * GRAVITY_DIRECTION

    # Generate data
    data = pd.DataFrame(
        {
            "step_num": np.arange(0, args.number),
        }
    )

    simulation_config = {
        'data_file': args.data_output,
        'external_force': args.external_output,
        'dt': 1.0 / args.fps,
    }

    # Create initial conditions
    x = np.zeros((args.number, 3))
    x[0, :] = np.array([0, args.y_init, 0])

    # Create initial velocity
    v = np.zeros((args.number, 3))

    # fill vector with gravitational forces for each step
    external_force = np.zeros((args.number, 3))
    external_force[:, :] = GRAVITIONAL_FORCE

    for i in range(1, args.number):
        x[i, :], v[i, :] = forward_euler_step(
            MASS, simulation_config['dt'], v[i - 1, :], x[i - 1, :], external_force[i, :]
        )

    # Save data
    np.save(args.data_output, x)
    np.save(args.external_output, external_force)

    with io.open('config.yml', 'w', encoding='utf8') as outfile:
        yaml.dump(simulation_config, outfile)


if __name__ == "__main__":
    main()

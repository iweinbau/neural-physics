#!/usr/bin/env python
"""Data generation CLI tool simulating the position of a mass subject to gravity."""
import argparse

import numpy as np
import pandas as pd
import yaml
import io

GRAVITY = 9.81  # m/s^2
GRAVITY_DIRECTION = np.array([0, -1, 0])


def time(step: int, fps: int):
    """Calculate the time in seconds for a given step."""
    return round(step / fps, 5)


def main():
    """Main function for the data generation tool."""
    parser = argparse.ArgumentParser(
        description="Generate data for the position of a mass subject to gravity."
    )
    parser.add_argument(
        "-n",
        "--number",
        type=int,
        default=1000,
        help="Number of data points to generate.",
    )
    parser.add_argument(
        "-f",
        "--fps",
        type=int,
        default=60,
        help="Frames per second.",
    )
    parser.add_argument(
        "-y",
        "--y-init",
        type=float,
        default=1000,
        help="Initial height of the mass.",
    )
    parser.add_argument(
        "-g",
        "--gravity",
        type=float,
        default=9.81,
        help="Gravitational acceleration"
    )
    parser.add_argument(
        "-gd",
        "--gravity-dir",
        nargs='+',
        default=np.array([0, -1, 0]),
        type=float,
        help="Gravity direction"
    )

    parser.add_argument(
        "-sl",
        "--sea-level",
        type=float,
        default=0,
        help="Sea level height"
    )
    parser.add_argument(
        "-o", "--output", type=str, default="data.csv", help="Output file name."
    )
    args = parser.parse_args()

    GRAVITY = args.gravity
    GRAVITY_DIRECTION = np.array(args.gravity_dir)

    # Generate data
    data = pd.DataFrame(
        {
            "step_num": np.arange(0, args.number),
        }
    )

    simulation_config = {
        'gravity': GRAVITY,
        'gravity_direction': GRAVITY_DIRECTION.tolist(),
        'sea_level': args.sea_level
    }

    data["time_s"] = data["step_num"].apply(lambda x: time(x, args.fps))

    data["y"] = args.y_init - GRAVITY * data["time_s"] ** 2 * 0.5
    data["y"] = data["y"].clip(lower=args.sea_level)  # stop at sea level
    data["y"] = data["y"].round(5)

    # add y deltas
    data["y_delta"] = -data["y"].diff(periods=-1)
    data["y_delta"] = data["y_delta"].round(5)

    # add previous y value
    data["y_prev"] = data["y"].shift(periods=1, fill_value=0)

    # Save the data
    data.to_csv(args.output, index=False)

    with io.open('config.yml', 'w', encoding='utf8') as outfile:
        yaml.dump(simulation_config, outfile)


if __name__ == "__main__":
    main()
